/* 
В этом примере текст h1 будет иметь размер 2.25rem (36px) для устройств шириной менее 700 пикселей, 
3.5rem (56px) для устройств шириной от 700 до 1000 пикселей и 4.75rem (76px) 
для устройств шириной больше или равной 1000 пикселей. 
*/

html {
  font-size: 100%;
}

h1 {
  font-size: 2.25rem; // 36px
}

@media (min-width: 700px){ 
  h1 { 
    font-size: 3.5rem; // 56px
  }
}

@media (min-width: 1000px){   
  h1 {
    font-size: 4.75rem; // 76px
  }
}

--------------------------------------------------
--------------------------------------------------
--------------------------------------------------

/*
Как мы упоминали ранее, единицы области просмотра сами по себе быстро выйдут из-под контроля 
в зависимости от того, насколько они будут масштабироваться вверх и вниз. 
Но что, если мы объединим единицы vw с единицами rem, используя calc()? 
Используя эту функцию, мы можем создать такое правило: 
*/

h1 {
  font-size: calc(1.3rem + 3.6vw);
}

/*
Это вычисленное значение будет не менее 1.3rem или около 21px, 
если область просмотра гипотетически была равна нулю (чего не было бы в реальном мире). 
Тогда значение 3.6vw добавит скорость роста, которую мы можем контролировать, 
чтобы она была более постепенной, чем просто единицы окна просмотра сами по себе.

При ширине области просмотра 414px, 3.6vw будет 3,6% или около 15px. 
Таким образом, рассчётный font-size будет 21px + 15px, или около 36px. 
При ширине устройства 1440px, 3.6vw будет около 52px, поэтому font-size будет 21px + 52px или около 73px.
*/

--------------------------------------------------
--------------------------------------------------
--------------------------------------------------

/*
Вот пример ограничения шрифта не менее 36 пикселей и не более 76 пикселей:
*/

h1 {
    font-size: 2.25rem; // 36px
}

@media (min-width: 414px){
  h1 {
    font-size: calc(1.3rem + 3.6vw); // fluidly scale
    }
}

@media (min-width: 1440px){
  h1 {
    font-size: 4.75rem; // 76px
  }
}

/*
Если вы выберете этот подход, вам, возможно, придется поиграть со значениями rem и vw, 
чтобы попытаться приблизиться к 36px при 414px и 76px при 1440px. 
Лично мне нравится подход без медиа-запросов, поскольку он позволяет 
гибко реагировать на размер шрифта с помощью одного правила CSS.
*/


--------------------------------------------------
--------------------------------------------------
--------------------------------------------------


/*
Теперь, преобразовав наши пиксели в ремы, окончательное правило размера шрифта будет выглядеть так:
*/

h1 {
  font-size: calc(2.25rem + (((100vw - 20rem) / (90 - 20))) * (4.75 - 2.25));
}

/* 
Добавляем медиа-запросы
*/

h1 {
    font-size: 2.25rem; // 36px
}

@media (min-width: 414px){
  h1 {
    font-size: calc(2.25rem + (((100vw - 20rem) / (90 - 20))) * (4.75 - 2.25)); // fluidly scale
    }
}

@media (min-width: 1440px){
  h1 {
    font-size: 4.75rem; // 76px
  }
}

/* Вариант Sass mixin */

@mixin calc-font-size($min-vw, $max-vw, $min-font-size, $max-font-size){
    font-size: calc(#{$min-font-size}rem + ((100vw - #{$min-vw}rem) / (#{$max-vw} - #{$min-vw})) * (#{$max-font-size} - #{$min-font-size}));
}

h1 {
  font-size: 2.25rem;
}

@media (min-width: 414px){
  h1 {
    @include calc-font-size(25.875, 90, 2.25, 4.75);
  }

@media (min-width: 1440px){
  h1 {
    font-size: 4.75rem;
  }
  
  
